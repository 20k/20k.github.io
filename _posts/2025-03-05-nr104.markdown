---
layout: post
title:  "Numerical Relativity 104: Simulating binary neutron star collisions (N body relativistic eularian hydrodynamics)"
date:   2026-02-02 12:33:23 +0000
categories: C++
---

Some things are easy. Some things are hard. Some things are neutron star collisions. Lets get into it

# What are we doing today?

Modelling and simulating neutron stars is a multi step process. Lets break this down into two phases, and then break them down further as we get there

1. Initial conditions
2. Evolution equations

## Initial conditions

1. First we'll be constructing a non spinning, isolated neutron star. This will be modelled as a self gravitating fluid in hydrostatic equilibrium - that is to say, the internal pressure counterbalances the gravitational pull of the star. We'll be solving an equation known as the TOV equation (Tolman–Oppenheimer–Volkoff), which will fully describe our star. This is actually a set of partial differential equations, and a good reference for what we're doing is over [here](https://einsteintoolkit.org/thornguide/EinsteinInitialData/TOVSolver/documentation.html#x1-2004r4)
2. Then, we must re-describe that same star as a spinning, moving star. This involves integrating another series of equations, which will be derived from [this](https://arxiv.org/pdf/1606.04881) paper. Its notable that while a real spinning star would be oblate, not modelling this is a deliberate approximation
3. Once we have our spinning, moving body, we then have to make it physical by solving for a correction, to make it satisfy the hamiltonian constraint. If you remember the black hole initial conditions, this is the same process
4. After all of this, we then need to construct our final hydrodynamic variables

Each of these steps is extremely non trivial, and will be presented in detail. If you're wondering why we don't simply directly construct a spinning neutron star through some kind of spinning TOV, its because the equation simply doesn't exist

# What even is a neutron star anyway?

Neutron stars are one of the possible final resting states of a star, when they run out of fuel, and begin to collapse. There are three mainstream kinds of stellar remnants:

1. White dwarves, made up of ordinary matter. These are supported by electron degeneracy pressure
2. Neutron stars, when the intense gravity forces electrons and protons to merge, forming neutrons. These are supported by neutron degeneracy pressure
3. Black holes, when gravity overcomes everything and there's no return

Today we're going to be looking at #2, and we'll dabble in #3

# Modelling a neutron star

Fun fact: Nobody really knows how neutron stars are structured internally. There's a wide range of theories, and the radius of a neutron star is pretty unknown. When you want to solve for a body in hydrostatic equilibrium, the equations are actually missing one key component: an equation of state. An equation of state links together density, and pressure - allowing you to tie the two together. In general, this may be non trivial, or even completely numerical

Because of this, we have to pick an equation of state, which gives us a specific model of a neutron star: The simplest model is what is called a [polytrope](https://en.wikipedia.org/wiki/Polytrope). The equation of state for a polytrope is as follows:

$$P = K \rho_0^\Gamma$$

Where $K$ is a proportionality constant, $\Gamma$ is the polytropic index[^polytropic], $\rho_0$ is the rest mass, and $P$ is the pressure. If we pick values of $\Gamma$ and $K$, this ties together $\rho_0$ and $P$. At this point, all we need is a central rest mass density, $\rho_c$, and we have (in theory) completely determined the structure of our star

[^polytropic]: Note that there are multiple definitions of this equation: if you see an $n$ its a different convention.

Unfortunately, there is no analytic solution to any of this, because that would simply be too easy

## A body in hydrodynamic equilibrium: Tolman-Oppenheimer-Volkoff (TOV)

The equation that governs a relativistic, spherically symmetric body in hydrostatic equilibrium is called the TOV equation. This is a set of two coupled partial differential equations, which we must solve simultaneously. They are fully described by one parameter, which is the central density: the rest density of matter, at the centre of your body. Additionally, we have to supply an equation of state - our polytropic equation - that links the density and pressure together

At the end of this segment, we will have a mass distribution for our star - ie the density of matter as a function of radius. Where the pressure/mass drops to zero, we'll also have defined the radius of our star as well

Wikipedia lists an unnecessarily complicated[^postnewtonian] form of the equations, so [here's (17)](https://www.as.utexas.edu/astronomy/education/spring13/bromm/secure/TOC_Supplement.pdf) a nicer form (in units of $c=G=1$, schwarzschild coordinates):

[^postnewtonian]: They're structured in a form to compare with newtonian theory, as a post newtonian analysis. They are however not super useful

$$\begin{align}
\frac{dm}{dr} &= 4 \pi r^2 \mu\\
\frac{dP}{dr} &= -(\mu + P)\frac{m + 4 \pi r^3 P}{r(r-2m)}
\end{align}$$

|Symbol|Meaning|
|-|-|
|$r$|The radius, which parameterises the integration|
|$m$|The mass at a radius of less than $r$. Corresponds to the ADM mass|
|$P$|Pressure at $r$|
|$\mu$| Total specific energy density at $r$. This isn't the energy density integrated, 'total' refers to a combination of different energies - but at a specific point|
|$\epsilon$| Specific internal energy density|

This is one of the areas of the literature where the notation is unfortunately very muddled. There's significant re-use of symbols with incompatible meanings, and they are sometimes even redefined on the fly. Here's how to actually calculate everything, and how it all relates:

|Symbol|Name|Si Units|Geometric Units|Derivation from $P$|Derivation from $\rho_0$|
|-|-|-|-|-|-|
|$\rho_0$|Rest Mass Density|$\mathrm{kg}\; \mathrm{m}^{-3}$|$\mathrm{m}^{-2}$|$(\frac{P}{K})^{1/\Gamma}$|$\rho_0$|
|$\mu$|Total Energy Density|$\mathrm{kg}\; \mathrm{m}^{-1}\; \mathrm{s}^{-2}$|$\mathrm{m}^{-2}$|$(\frac{P}{K})^{1/\Gamma} + \frac{P}{\Gamma-1}$|$\rho_0 + K \frac{\rho_0^\Gamma}{\Gamma-1}$|
|$P$|Pressure|$\mathrm{kg}\;\mathrm{m}^{-1} \; \mathrm{s}^{-2}$|$\mathrm{m}^{-2}$|$P$|$K \rho_0^\Gamma$|
|$K$|Polytropic Constant (informal)|$\mathrm{kg}^{1-\Gamma} \; \mathrm{m}^{3\Gamma-1}\;\mathrm{s}^{-2}$|$\mathrm{m}^{2\Gamma-2}$|||

Note that I have made use of the equation of state. Todo: I should probably fix this. Here's some useful equations:

Todo: I need to split up EoS vs core thermodynamics

|Equation|
|-|
|$\mu = \rho_0(1 + \epsilon)$|
|$P = (\Gamma-1) \rho_0 \epsilon$|
|$h = 1 + \epsilon + \frac{P}{\rho_0}$|
|$\rho_0h = \mu + P$|

It is common to solve these equations in units of $c=G=M_\odot$, where $M_\odot$ is the mass of the sun. This is why I've provided all the units up above, and we're going go through [converting](https://www.seas.upenn.edu/~amyers/NaturalUnits.pdf) from SI units, to geometric units ($c=G=1$), to that new unit system ($c=G=M_\odot$). In general, you need to redefine mass to avoid your numbers blowing up too much

The procedure is as follows:

1. Convert your quantity into geometric units
2. Convert the mass of the sun, $1.988416 * 10^{30} \mathrm{kg}$, into meters, which is ~$1476.6196 \mathrm{m}$
3. Divide your quantity in $\mathrm{m}^n$ (eg $\mathrm{m}^2$) by $1476.6196^n$

I'll be showing you the code for how to do this. One thing to note is that $K$ is frequently given in geometric units instead of physical units, so I'll flag up when the units are wonky

Todo: List all the relations

# Solving the TOV equations

These equations are extremely easy to solve, once you've got everything in the correct units. Firstly, you might notice that the equations are singular at $r=0$. We're going to instead start at $r=r_{min}=10^{-6}$

Then, we need initial values for our other variables, at $r=r_{min}$:

|Variable|Value|
|-|-|
|$M$| $\frac{4}{3} \pi r_{min}^3 \mu\;$ (the integral of $\frac{dm}{dr}$, with $\mu$ held constant) |
|$P$| $K \rho_c^\Gamma$ |

Once we've done this, lets integrate. This is done by spotting that these are simple first order in 'time' (where $dt=dr$) systems, and can be solved with euler integration[^unstable]

[^unstable]: I've seen multiple reports in the literature that these equations are very stiff and hard to solve, but have not found this in practice

## Implementation

These equations are extremely fast to solve, so we're going for the route one solution here. Here's how all the unit conversions work:

```c++
///https://www.seas.upenn.edu/~amyers/NaturalUnits.pdf
//https://nssdc.gsfc.nasa.gov/planetary/factsheet/sunfact.html
double geometric_to_msol(double meters, double m_exponent)
{
    double m_to_kg = 1.3466 * pow(10., 27.);
    double msol_kg = 1.988416 * pow(10., 30.);
    double msol_meters = msol_kg / m_to_kg;

    return meters / pow(msol_meters, m_exponent);
}

double msol_to_geometric(double distance, double m_exponent)
{
    return geometric_to_msol(distance, -m_exponent);
}

double si_to_geometric(double quantity, double kg_exponent, double s_exponent)
{
    double G = 6.6743015 * pow(10., -11.);
    double C = 299792458;

    double factor = std::pow(G, -kg_exponent) * std::pow(C, 2 * kg_exponent - s_exponent);

    return quantity / factor;
}

double geometric_to_si(double quantity, double kg_exponent, double s_exponent)
{
    return si_to_geometric(quantity, -kg_exponent, -s_exponent);
}
```

The conversions between different quantities generally require $K$ and $\Gamma$, so I've implemented these all in a `parameters` struct for simplicity (todo: update):

```c++

///https://colab.research.google.com/drive/1yMD2j3Y6TcsykCI59YWiW9WAMW-SPf12#scrollTo=6vWjt7CWaVyV
///https://www.as.utexas.edu/astronomy/education/spring13/bromm/secure/TOC_Supplement.pdf
///https://arxiv.org/pdf/gr-qc/0403029
struct parameters
{
    double K = 0;
    double Gamma = 0;

    ///p0 -> p
    ///equation of state
    double rest_mass_density_to_pressure(double rest_mass_density) const
    {
        return K * pow(rest_mass_density, Gamma);
    }

    double rest_mass_density_to_energy_density(double rest_mass_density) const
    {
        double p = rest_mass_density_to_pressure(rest_mass_density);

        double p0 = rest_mass_density;

        return p0 + p/(Gamma-1);
    }

    ///inverse equation of state
    ///p -> p0
    double pressure_to_rest_mass_density(double p) const
    {
        return std::pow(p/K, 1/Gamma);
    }

    double pressure_to_energy_density(double p) const
    {
        return pressure_to_rest_mass_density(p) + p / (Gamma - 1);
    }
};
```

Initialising the integration state in units of $c=G=M\odot$ is straightforward:

```c++
struct integration_state
{
    double m = 0;
    double p = 0;
};

integration_state make_integration_state(double p0, double rmin, const parameters& param)
{
    double e = param.rest_mass_density_to_energy_density(p0);
    double m = (4./3.) * M_PI * e * pow(rmin, 3.);

    integration_state out;
    out.p = param.rest_mass_density_to_pressure(p0);
    out.m = m;
    return out;
}
```

Or, if you want to use SI units for the central density:

```c++
//p0 in si units
integration_state make_integration_state_si(double p0, double rmin, const parameters& param)
{
    //kg/m^3 -> m/m^3 -> 1/m^2
    double p0_geom = si_to_geometric(p0, 1, 0);
    //m^-2 -> msol^-2
    double p0_msol = geometric_to_msol(p0_geom, -2);

    return make_integration_state(p0_msol, rmin, param);
}
```

The actual integration itself is then easy:

Todo: Update and unscrew up code

```c++
struct integration_dr
{
    double dm = 0;
    double dp = 0;
};

integration_dr get_derivs(double r, const integration_state& st, const parameters& param)
{
    double e = param.pressure_to_energy_density(st.p);

    double p = st.p;
    double m = st.m;

    integration_dr out;

    out.dm = 4 * M_PI * e * pow(r, 2.);
    out.dp = -(e + p) * (m + 4 * M_PI * r*r*r * p) / (r * (r - 2 * m));
    return out;
}

struct integration_solution
{
    //in msols
    double M = 0;
    //in meters
    double R = 0;

    std::vector<double> pressure;
    std::vector<double> mass;
    std::vector<double> radius;
};

///units are c=g=msol
integration_solution solve_tov(const integration_state& start, const parameters& param, double min_radius, double min_pressure)
{
    integration_state st = start;

    double current_r = min_radius;
    double dr = 1. / 1024.;

    integration_solution sol;

    double last_r = 0;
    double last_m = 0;

    while(1)
    {
        sol.pressure.push_back(st.p);
        sol.mass.push_back(st.m);

        double r = current_r;

        sol.radius.push_back(r);

        last_r = r;
        last_m = st.m;

        integration_dr data = get_derivs(r, st, param);

        st.m += data.dm * dr;
        st.p += data.dp * dr;
        current_r += dr;

        if(st.p < min_pressure)
            break;
    }

    sol.R = msol_to_geometric(last_r, 1);
    sol.M = last_m;

    return sol;
}
```

## Testing the implementation

Lets check out section [VII](https://arxiv.org/pdf/1606.04881) of this paper, which we're about to get *very* familiar with

|Parameter|Value|
|-|-|
|$\rho_c$|$6.235\; 10^{17}\; \mathrm{kg}\;\mathrm{m}^{-3}$|
|$K$|$123.641 M_{\odot}^2$ in **geometric** units[^waste]|
|$\Gamma$|$2$|

[^waste]: If you'd like a peek behind the scenes on the development of these articles, it took me several days and 1k+ lines of code to figure out that this was the error that was preventing my integrator from working properly

Ideally, we'll simply have $M = 1.543 M_\odot$ and $R=13.4 \mathrm{km}$ pop out the other end

```c++
void solve()
{
    //kg/m^3
    double paper_p0 = 6.235 * pow(10., 17.);

    parameters param;
    param.K = 123.641; //in units of c=g=msol
    param.Gamma = 2;

    double rmin = 1e-6;

    integration_state st = make_integration_state_si(paper_p0, rmin, param);

    integration_solution sol = solve_tov(st, param, 1e-6, 0);

    std::cout << "Solved for " << sol.R / 1000. << "km " << sol.M << " msols " << std::endl;
}
```

We get this: `15.8102km 1.54315 msols`. Our mass is spot on, but our radius differs: we're actually in a different coordinate system at the moment (which is something we'll sort out later), but we'll still get a wrong answer. I suspect we're using a different measure of radius, but this paper does not list how it calculates the radius

Interestingly, a separate test case [here](https://colab.research.google.com/drive/1yMD2j3Y6TcsykCI59YWiW9WAMW-SPf12#scrollTo=00FWl5YzbSaB) actually gives the wrong answer, because their value of $N$ is too low. Increasing it, we're able to match their results for $\rho_c = 1.28 * 10^{-3}$ and $K=100$ in units of $c=G=M_{\odot}=1$, giving:

`14.1461km 1.40021msols`, which is extremely close. That code gives `14.136399564110704km 1.400270088513766msols` with better precision, which is pretty close. We also match the [cactus](https://einsteintoolkit.org/thornguide/EinsteinInitialData/TOVSolver/documentation.html#x1-2004r4) toolkit test case exactly, which appears to be the same. All in all: working great, but literature replication is a disaster as usual

## Solving for a specific ADM mass

You might notice, the ADM mass is not our free parameter - despite generally being what we want to specify - but instead the central density is

I think we both know deep down in our hearts that this section wasn't going to read "here's how to calculate the central density from the ADM mass", and that instead we'd be forced to bruteforce it. Firstly, we can pick an initial guess for the central energy as follows:

$$M = \frac{4}{3} \pi r^3 \mu$$

Ie, we assume a constant $\mu$ through the star, then calculate this as a density. We'll have to guess our neutron star mass as well: the ratio of mass to radius is called the compactness factor $C$, and we can do $R=\frac{M}{C=0.06}$ as a guess. We're just looking for a vague ballpark range here

From there, you can simply bruteforce over a range of central density values, eg $\frac{\mu}{100}$ -> $5 \mu$, converted to rest densities

There's a teeny problem here. Neutron star ADM masses are not unique. You see, the graph of radius vs mass looks like this:

![neutron](/assets/nr4_neutron.PNG)

This means that there might be multiple solutions for central density for a specific ADM mass, and for realistic neutron stars there are at least two. Which makes this problem much more annoying. Anyway, lets write a basic procedure for this:

Todo: This bruteforcer kind of sucks

```c++

std::vector<double> search_for_adm_mass(double adm_mass, const parameters& param)
{
    double r_approx = adm_mass / 0.06;

    double start_E = adm_mass / ((4./3.) * M_PI * r_approx*r_approx*r_approx);
    double start_P = param.energy_density_to_pressure(start_E);
    double start_density = param.pressure_to_rest_mass_density(start_P);

    double rmin = 1e-6;

    std::vector<double> densities;
    std::vector<double> masses;

    int to_check = 2000;
    densities.resize(to_check);
    masses.resize(to_check);

    double min_density = start_density / 100;
    double max_density = start_density * 500;

    for(int i=0; i < to_check; i++)
    {
        double frac = (double)i / to_check;

        double test_density = mix(min_density, max_density, frac);

        integration_state next_st = make_integration_state(test_density, rmin, param);
        integration_solution next_sol = solve_tov(next_st, param, rmin, 0.);

        densities[i] = test_density;
        masses[i] = next_sol.M;
    }

    std::vector<double> out;

    for(int i=0; i < to_check - 1; i++)
    {
        double current = masses[i];
        double next = masses[i+1];

        double min_mass = std::min(current, next);
        double max_mass = std::max(current, next);

        if(adm_mass >= min_mass && adm_mass < max_mass)
        {
            double frac = (adm_mass - min_mass) / (max_mass - min_mass);

            out.push_back(mix(densities[i], densities[i+1], frac));
        }
    }

    return out;
}
```

This performs a pretty basic bruteforce through the parameter space, and looks for masses which match our result. Something smarter would refine the result more closely instead of linearly bruteforcing, but it works fine. The lower density branch here (with larger radius) is the correct neutron star in our case, which we simply have to know a-priori

## Key takeaways from solving TOV

At the end of this process, we've gained the ability to fully describe the following variables of our neutron star: rest mass density $\rho_0$, energy density $\mu$, baryonic/rest mass $M$ (also called $M_0$), and pressure $P$. Keep this in mind as we carry on forwards. We've now solved the first step in our initial conditions procedure: constructing a static neutron star

Next up, we need to give it momentum and spin. This is where things get a bit complicated

# Bowen-York Type Initial Data for Binaries with Neutron Stars

The next step we need to do is take our matter distribution - spin it up somehow, and give it some momentum. To do this, we'll need to transplant it into the ADM formalism, and solve a bunch more equations

The actual paper we're going to be implementing today is [this](https://arxiv.org/pdf/1606.04881) one. Its going to be a step up in complexity compared to things we've solved previously together. One of the key things today in this article is that I'm going to present you with a simpler and fast procedure for implementing this paper, without losing any generality, as I've been able to skip some of the complexity. For consistency, we'll be keeping our existing notation, and below is the conversions we'll make

|Symbol|This article|Paper
|-|-|-|
|Total energy density|$\mu$|$\rho$|
|Pressure|$P$ or $p$|$p$|

I'm trying to stem the incredibly random notational divergence in the literature a bit to make things less crazy to follow, which is why I'm converting. We'll also be swapping from $P$ to $p$, because $P^i$ will be used for the ADM momentum

If you remember from our black hole initial conditions paper, the basic idea for many kinds of initial conditions is that of conformal flatness. That is to say, we take our adm metric $\gamma_{ij}$, and perform a conformal transform on it by a scalar, to end up with a conformal metric. In this paper, our ADM variables are transformed as follows:

$$\begin{align}
\gamma_{ij} &= \Phi^4 \bar{\gamma}_{ij}\\
A_{ij} &= \Phi^{-2} \bar{A}_{ij}
\end{align}$$

Where $$\bar{\gamma}_{ij}$$ is the conformally flat (ie the identity matrix) metric tensor, $A_{ij}$ is the extrinsic curvature, and $\Phi$ is the conformal factor. Its important to note that this is the same conformal decomposition as the black hole initial conditions we've used previously[^explicitly]. Similarly, we're trying to solve for exactly two things only in this paper

1. The conformal factor $\Phi$
2. The extrinsic curvature $$\bar{A}_{ij}$$

[^explicitly]: I explicitly picked this paper because it allows us to construct multiple black holes and neutron stars together

The conformally flatness assumption, as well as the maximal slice assumption, gives us a familiar looking constraint to solve:

$$\partial^i \partial_i \Phi = -\frac{1}{8} \Phi^{-7} \bar{A}_{ij} \bar{A}^{ij} - 2 \pi \Phi^5 \mu_H$$

One thing to note is that any time you see a $\pi$, its a sure fire bet that it means there are matter terms involved

|Variable|Meaning|
|-|-|
|$\Phi$|Conformal factor, unknown|
|$\bar{A}_{ij}$| Conformal extrinsic curvature|
|$\mu_H$| Scalar matter source for the ADM equations|

This paper in theory lets us solve the TOV equations in a conformally flat spacetime, via (77-79), but we've deliberately skipping this step, as solving the TOV equations directly is much simpler. In general I wouldn't recommend implementing section VI (other than (83-84)), and I think eq (82) is incorrect unfortunately

## Implementing this paper

The procedure in this paper is as follows:

1. Solve for $\Phi_{tov}$, a conformal factor for the isotropic TOV solution
2. Construct our conformal hydrodynamic variables from our TOV hydrodynamic variables
3. Use these, as well as our ADM momentum and angular momentum to calculate $\bar{A}_{ij}$
4. Use that $\bar{A}_{ij}$ solution to construct $\Phi$, the real conformal factor
5. Construct the final real hydrodynamic variables from the conformal ones defined earlier

## Solving for $\Phi_{tov}$

First off, we need to start over in section VI. Given that we a-priori have our matter distribution, we don't need to solve for $\alpha$, or $\Theta$ luckily, and the only variable we need is $\Phi_{tov}$. There's a nicer way of solving for $\Phi_{tov}$ than specified in the paper, but first we should talk about $\bar{r}$. One thing that absolutely must be noted is that the paper we're working on is in *isotropic* coordinates with the radial coordinate $\bar{r}$. Up until now, we've been working in *schwarzschild* coordinates with the radial coordinate $r$. We're going to have to perform a conversion between the two: the conversion function is defined [as follows (24 + 25)](https://einsteintoolkit.org/thornguide/EinsteinInitialData/TOVSolver/documentation.html#x1-2004r4):

$$\begin{align}
\bar{r} &= C r \mathrm{exp}(\int^r_0 \frac{1 - (1 - 2 \frac{m}{r})^{\frac{1}{2}}}{r(1 - 2\frac{m}{r})^{\frac{1}{2}}} dr)\\
C &= \frac{1}{2R}(\sqrt{R^2 - 2MR} + R - M) \mathrm{exp}(-\int^R_0 \frac{1 - (1 - 2 \frac{m}{r})^{\frac{1}{2}}}{r(1 - 2\frac{m}{r})^{\frac{1}{2}}} dr)
\end{align}$$

Where $R$ is the radius of the star in schwarzschild coordinates, and $M$ is the total rest mass (ie the integral of $m(r)$). Technical details of how this works is available on the linked page

Integrating this is moderately straightforward, and can be done by keeping a running summation of the integral within $\mathrm{exp}$. $m$ is still secretly a function of radius $m(r)$, and is still the cumulative mass from earlier. To get back to the topic at hand, note that we're looking for a $\Phi_{tov}$ from a metric defined as follows:

$$ds^2 = -\alpha^2(\bar{r}) dt^2 + (\Phi_{tov}(\bar{r}))^4(d\bar{r}^2 + \bar{r}^2 d\Omega)$$

The einstein toolkit page lists TOV in isotropic coordinates as:

$$ds^2 = -e^{2\phi} dt^2 +e^{2\Lambda}(d\bar{r}^2 + \bar{r}^2 d\Omega^2)$$

We can see that $e^{2\Lambda} = \Phi_{tov}^4$. And, helpfully, someone smarter[^smrt] than I am has worked out that $e^{\Lambda} = \frac{r}{\bar{r}}$

[^smrt]: [https://physics.stackexchange.com/questions/145342/schwarzschild-metric-in-isotropic-coordinates](https://physics.stackexchange.com/questions/145342/schwarzschild-metric-in-isotropic-coordinates)

This is a much nicer way of calculating this quantity, as $\Phi_{tov} = (\frac{r}{\bar{r}})^\frac{1}{2}$. Do note as an implementation detail, when you're looking up eg a pressure at a radius, you'll want to ensure that you have the ability to look it up by $isotropic$ radius. Ie we need to keep on hand the function $r = f(\bar{r})$, which you should tabulate somewhere

## Calculating the conformal hydrodynamic variables

Once we have $\phi_{tov}$, this is straightforward. We define new conformal variables as such (83-84), keeping in mind that we're using slightly different notation from the paper:

$$\begin{align}
\bar{\mu} &= \Phi_{tov}^8 \mu_{tov}\\
\bar{p} &= \Phi_{tov}^8 p_{tov}
\end{align}$$

These are the only two variables we now need from the hydrodynamics

## Calculating $\bar{A}^{ij}$

From here, its time to dig into the really fun bits. As with our black hole solution, we have two parameters we can specify: the ADM momentum $P^i$, and the ADM angular momentum $J^i$. These are broken up into two equations: (51), and (54) - which we simply sum together

### $P^i$ (linear momentum)

To calculate the contribution from the linear momentum, we need to calculate this equation:

$$\begin{align}
\bar{A}^{ij}_P &=\frac{3Q}{2r^2}(P^i l^j + P^j l^i - (\eta^{ij} - l^i l^j)(P^k l_k)) \\
&+ \frac{3C}{r^4} (P^i l^j + P^j l^i + (\eta^{ij} - 5l^i l^j)(P^k l_k))\\
\end{align}
$$

Here's what everything means

|Symbol|Definition|
|-|-|
|$P^i$|ADM linear momentum|
|$r$|Coordinate distance (in isotropic coordinates) from the neutron star's origin|
|$\eta^{ij}$| The inverse of the conformally flat metric tensor (here: the identity matrix)|
|$l^i$| $l^i=\frac{x^i}{r}$, a unit radial vector|
|$Q$ and $C$| We'll get to these|

The quantities here are trivial to calculate, except for $Q$ and $C$. This is where the information in this paper gets a bit.. scattered, so I'm simply going to present the order of things to calculate

From now on, **our $r$ coordinate is always isotropic**. Variables such as $\bar{\mu}$ should be considered a function of isotropic radius

#### $\mathcal{M}$

The first thing we need is to calculate $\mathcal{M}$. This is straightforward via (59)

$$\mathcal{M} = 4\pi \int^{r_0}_0 (\bar{\mu} + \bar{p}) r^2 dr$$

Integrating this is a straightforward piecewise numerical integration. $r_0$ is the isotropic radius of our neutron star, and $r$ is the integration variable. Note that this quantity is not the same as $M$

#### $\sigma$

Next up, we'll calculate sigma. This is done via (57):

$$\sigma = \frac{\bar{\mu} + \bar{p}}{\mathcal{M}}$$

#### $Q$ and $C$

These functions are both functions of the radius. To emphasise this, I'll specify them as follows:

$$\begin{align}
Q(r) &= 4 \pi \int^r_0 \sigma x^2\; dx\\
C(r) &= \frac{2}{3} \pi \int^r_0 \sigma x^4\; dx\\
\end{align}
$$

When $r > r_0$, $Q(r)=1$, and you should enforce this. The paper does not specify a value for $C(r)$ where $r > r_0$, so I set $C(r) = C(r_0)$ in this region

I personally found the $r'$ notation to be pretty confusing given that its also used for differentiation when I first read this paper, so I've swapped the notation to make it clearer that it is an integration variable. Note that $\sigma$ is also a function, so here we'd be doing $\sigma(x)$

### $J^i$ (angular momentum)

The equation for this is (54):

$$\bar{A}^{ij}_J =\frac{6}{r^3}l^{(i} \epsilon^{{j)}kl}J_k l_l N$$

Here's what everything means

|Symbol|Definition|
|-|-|
|$J^i$|ADM angular momentum (lower with $\eta_{ij}$, here the identity matrix)|
|$r$|Coordinate distance (in isotropic coordinates) from the neutron stars origin|
|$l^i$| $l^i=\frac{x^i}{r}$, a unit radial vector (lower with $\eta_{ij}$)|
|$N$| We'll get to this|
|$\epsilon^{ijk}$| The levi civita symbol|

As previously, we'll dig into the procedure for calculating $N$, and linearise the procedure because the functions are a bit scattered

#### $\mathcal{N}$

You might be wondering if having two functions named $\mathcal{N}$ and $N$ might have resulted in days of confusion for a poor lost developer several years ago, who was reading this as an early paper in their NR journey when they didn't know any better than to be hypervigilant of notational issues

Anyway. Implementing this is under (64):

$$\mathcal{N} = \frac{8 \pi}{3} \int^{r_0}_0 (\bar{\mu} + \bar{p}) r^4\; dr$$

Where $r_0$ is the isotropic radius of our neutron star, and $r$ is the integration variable. Perhaps this goes without saying for people with better reading skills than I, but this function is **not** $N$

#### $\kappa$

(62)

$$\kappa =\frac{\bar{\mu} + \bar{p}}{\mathcal{N}}$$

#### $N$

(55)

$$N(r) = \frac{8 \pi}{3} \int^r_0 \kappa x^4\;dx$$

Remembering that $\kappa(x)$ is a function, and $x$ is the integration variable

When $r>r_0$, $N(r) = 1$, and you should enforce this

## Calculating $\Phi$, the conformal factor

We now have $\bar{\mu}$, $\bar{p}$, and $\bar{A}^{ij} = \bar{A}^{ij}_P + \bar{A}^{ij}_J$. We're going to put this all together, and solve the final piece of our puzzle (22):

$$\Delta \Phi = -\frac{1}{8} \Phi^{-7} \bar{A}_{ij} \bar{A}^{ij} - 2 \pi \Phi^{-3} \bar{\mu}_H$$

This is a standard laplacian. We're going to go over the details of how to perform our full construction after we finish up our next step, which is solving for $\bar{\mu}_H$. Whatever it is, it can't be that bad, right?

Todo: Londo (wesley?)

### Solving for $\bar{\mu}_H$ is indeed that bad

The definition can be found by applying $\Phi_{tov}^8$ to $\mu_H$ (6 + 20):

$$\bar{\mu}_H = (\bar{\mu} + \bar{p})W^2 - \bar{p}$$

Which should be set to $0$ when $r>r_0$. What's $W$?

#### $W$, aka the lorentz factor

There are two lorentz factors in this paper. One for the linear momentum, and one for the angular momentum

Linear (60):

$$W_{P}^2 = \frac{1}{2}\left (1 + \sqrt{1 + \frac{4 P_i P^i}{\mathcal{M}^2}} \right)$$

Angular (65):

$$\begin{align}
W_{J}^2 &=\frac{1}{2}\left (1 + \sqrt{1 + \frac{4 J_i J^i r^2 \sin^2 \theta}{\mathcal{N}^2}} \right)\\
\sin^2 \theta &= 1 - (\hat{J}^i \hat{l}_i)^2 \\
\end{align}$$

$l_i$ is the same unit normal as earlier. For $\sin^2 \theta$, you'll want to ensure that $J^i$ and $l_i$ are normalised (hence the hats) to a length of $1$, as we're using the formula $\mathrm{dot}(a, b) = \cos \theta ||a||\;||b||$. $\theta$ more technically is the angle between $J^i$ and $l^i$. Note that the quantity $\theta$ becomes undefined as $J^i J_i$ tends to $0$, but given the prefix term, we can simply set $\sin^2 \theta$ to anything when this happens

Sometimes I wish I'd taken up fishing

#### Combining lorentz factors

Of course, we can't simply *add* lorentz factors together, that'd be madness. Instead you use the rapidity formula. This gives us:

$$W = \mathrm{cosh}(\mathrm{arccosh}(W_P) + \mathrm{arccosh}(W_J)) $$

With this done, its finally over, and I can now describe the procedure for solving our laplacian

### Solving the laplacian, finally

Here, I'm going to describe how to mix together neutron stars, and black holes. For both neutron stars, and black holes, we have an extrinsic curvature $\bar{A}^{ij}$. For black holes, use the procedure as specified here in Todo article. This is great, we simply sum every extrinsic curvature linearly, and then calculate $\bar{A}^{ij} \bar{A}_{ij}$

Next up, we need to do a bit of work. First off, we need to remember that we can express our conformal factor $\Phi = 1 + u + F$. $u$ is a correction, and what we solve for in the laplacian. We didn't dig into this, but as black holes have no matter distribution, the term $F$ (originally called: $\frac{1}{a}$) is to stop the solution from being trivially conformally flat. This isn't a problem for neutron stars, as you can see in our laplacian we have the term:

$$- 2 \pi \Phi^{-3} \bar{\mu}_H$$

Which is a matter term on the right hand side to prevent it from being flat. To make this all interoperate correctly and give correct solutions, I'll lay out how this works:

|Type|Function|
|-|-|
|Neutron Star|$F_{(i)} = 0$|
|Black Hole| $F_{(i)} = \frac{m_i}{2 \mid \overrightarrow{r} - \overrightarrow{x}_{(i)} \mid}$ |

To calculate $F$, sum over $F_{(i)}$ for every object

The last thing to do is figure out what to do with our individual $\bar{\mu}_H$ terms. Luckily, you simply sum these, and make sure that an individual neutron stars contribution is $0$ outside of its radius. To make this super explicit:

$$\begin{align}
\bar{A}_{ij}^{sum} &= \sum^N_{k=1} \bar{A}_{ij}^{(k)}\\
F^{sum} &= \sum^N_{k=1} F_{(k)} \\
\bar{\mu}^{sum}_H &= \sum^N_{k=1} \bar{\mu}_H^{(k)}\\
\Delta u &= -\frac{1}{8} \Phi^{-7} \bar{A}_{ij}^{sum} \bar{A}^{ij}_{sum} - 2 \pi \Phi^{-3} \bar{\mu}^{sum}_H
\end{align}$$

That's it, we're good to go. From here on, its just a standard laplacian of exactly the same form we solved in todo: this article, and there's absolutely nothing special whatsoever

This lets us solve for our final quantities. Firstly, we'll need some helpers:

|Name|Symbol|Value|
|-|-|-|
| Conformal Angular Adm Matter Source | $$\tilde{S}^J_i$$ | $$\epsilon_{ijk} J^j x^k \kappa(r)$$ ($x$ is the current coordinate world position relative to the star) |
| Conformal Linear Adm Matter Source | $$\tilde{S}^i_P$$ | $$P^i \sigma(r)$$ |
| Conformal Adm Matter Source | $$\tilde{S}^i$$ | $$\tilde{S}^i_P + \eta^{ik} \tilde{S}_k^J$$ |

It is important to note that $\tilde{S}_i^J$ is not simply a function of radius, and is both a function of radius *and* angle. This gives us our final quantities:

|Name|Symbol|Value|
|-|-|-|
|Metric Tensor|$$\gamma_{ij}$$|$$\Phi^4 \eta_{ij}$$|
|Extrinsic Curvature|$$K_{ij}$$|$$\Phi^{-2} \bar{A}_{ij}$$|
| Initial Adm Matter Source | $$\mu_H$$ | $$\Phi^{-8} \bar{\mu}_H$$ |
| Initial Adm Matter Source | $$S^i$$ | $$\Phi^{-10} \tilde{S}^i$$ |
| Initial Pressure | $$P$$ | $$\Phi^{-8} \bar{P}$$ |

## Recovering the hydrodynamic variables

The variables $S^i$ and $\mu_H$ are not actually hydrodynamic quantities, and so we have to construct our final *real* quantities that we could plug into a fluid dynamics simulation.

|Symbol|Name|
|-|-|
|$W$ aka $u^0$| The lorentz factor|
|$u^i$|Fluid 4-velocity (the spatial components)|
|$\rho_0$|Rest mass density|
|$\mu$|Total mass-energy density|
|$p$|Pressure|

We unfortunately cannot simply transform our conformal variables, as they are not actually equivalent. We must instead construct them from $S^i$ and $\mu_H$. To do this, we have the following equations:

$$\begin{align}
\mu_H &= (\mu + p) W^2 - p \\
\gamma_{ij} S^i S^j &= (\mu + p)^2 W^2 (W^2 - 1)
\end{align}$$

Initially this might seem a tad unsolvable, but we have an equation of state that you can use to tie together $\mu$ and $p$. This paper leaves out the fact that there is no easy solution to this series of equations, and so I'll detail the procedure for solving this

1. Make an initial guess for $W_0=1$ and $\mu_0 = \mu_H$
2. Numerically find a $\mu$ such that $(\mu_n + p) W^2 - p = \mu_H$, giving $\mu_{n+1}$. I do a simple linear search. You'll also have to invert the equation of state to go from $\mu$ -> $p$, which I tabulate and bruteforce as its fairly quick to search
3. Calculate $W_{n+1} = \frac{\sqrt{1 + \sqrt{4 \frac{\gamma_{ij} S^i S^j}{(\mu + p)^2} + 1}}}{\sqrt{2}}$
4. Iterate until the desired accuracy is reached

This is applying fixed point iteration to these two equations to solve them simultaneously. Once you've solved for $W$ and $\mu$, then calculate $u^i = \frac{S^i}{(\mu + p)W}$. The full fluid 4-velocity is $(W, u^i)$

# Relativistic Eularian Hydrodynamics

We're going to be looking at two papers today, primarily the latter:

[Fully general relativistic simulation of coalescing binary neutron stars: Preparatory tests](https://arxiv.org/pdf/gr-qc/9908027)

[Hydrodynamic Simulations in 3+1 General Relativity](https://arxiv.org/pdf/gr-qc/0209102)

We're going to modify this paper a little to remove some divergent quantities, and I'll illustrate how to track matter per-star as it moves around the grid

We'll also need to perform the standard modifications to the BSSN equations to add matter terms in

## Paper notation and equations

|Paper Notation | Description |
|-|-|
|$\rho$| ADM scalar matter source. We'll be calling this $\rho_s$ to avoid confusion |
|$S_i$| ADM vector matter source. Also known as $j_i$ |
|$S_{ij}$| ADM tensor matter source |
|$S$ | The trace of $S_{ij}$ with respect to $\gamma_{ij}$|
|$\rho_*$| Evolution variable related to the fluid's matter density |
|$e_*$| Evolution variable related to the fluid's energy |
|$\tilde{S}_k$ | Evolution variable related to the fluid momentum|
|$u^i$ | Spatial part of the fluid 4-velocity |
|$u^0$| The lorentz factor (the first component of the fluid 4-velocity)|
|$w$| $p_* \alpha u^0$, used to calculate the lorentz factor|
|$v^i$ | The coordinate 3-velocity|
|$P$ | Pressure. We'll be using their notation instead of $p$|

The convention that they use for the fluid variables lines up with ours

$\rho_s$, $S_i$ and $S_{ij}$ together make up the components of the stress energy tensor $T_{\mu\nu}$

$\rho_*$, $e_*$, and $\tilde{S}_k$ are what we'll be solving the evolution equations for

We'll also need to convert this papers older style conformal factor $\phi$, to ours which is $W$. The conformal decomposition is defined as follows: $$\tilde{\gamma}_{ij} = W^2 \gamma_{ij} = e^{-4\phi} \gamma_{ij}$$

|Ours|Theirs|
|-|-|
|$W$|$e^{-2\phi}$|
|$W^2$|$e^{-4\phi}$|
|$W^3$|$e^{-6\phi}$|
|$\frac{1}{W}$|$e^{2\phi}$|
|$\frac{1}{W^2}$|$e^{4\phi}$|
|$\frac{1}{W^3}$|$e^{6\phi}$|
|$-\frac{\partial_i W}{2W}$|$\partial_i \phi$|

This is basic, but it saves a lot of time looking things up when you check the reference paper

## Initial conditions

First off, we need to translate from our hydrodynamic quantities, to this paper's quantities. We'll also need the equation of state for a perfect fluid, which is $P = (\Gamma - 1) \rho_0 \epsilon$, where $\Gamma = 2$

|Symbol | Initial value |
|-|-|
|$\rho_0$ | Numerically calculated from the inverted neutron star equation of state from $P$ and $\mu$, via $\mu = \rho_0 + \frac{P}{\Gamma - 1}$  |
|$\rho_*$| $\rho_0 \alpha u^0 W^{-3}$ |
|$\rho_0 \epsilon $| $\frac{P}{\Gamma - 1}$ (perfect fluid EoS)|
|$e_*$| $(\rho_0 \epsilon)^{\frac{1}{\Gamma}} \alpha u^0 W^{-3}$|
|$u_i$ | $\beta^i u^0 + \gamma_{ij} u^j$|
|$\tilde{S}_k$| $\rho_* h u_k$ |

We already have the lorentz factor $u^0$ from our initial conditions, as well as distributions for $P$, $\mu$, and $u^i$. $u_i$'s derivation can be worked out by lowering $u^\mu$ with the metric tensor $g_{\mu\nu}$

## Evolution Equations

The equations themselves are straightforward:

$$\begin{align}
\partial_t p_* = &-\partial_i(p_* v^i)\\
\partial_t e_* = &-\partial_i(e_* v^i)\\
\partial_t \tilde{S}_k = &-\partial_i(\tilde{S}_k v^i) \\
                       &- \alpha \frac{1}{W^3} \partial_k P - w h \partial_k \alpha \\
                       &-\tilde{S}_j \partial_k \beta^j + \frac{\alpha W^2\tilde{S}_i \tilde{S}_j}{2wh} \partial_k \tilde{\gamma}^{ij}\\
                       &+ \frac{\alpha h(w^2 - p_*^2)}{w} \frac{\partial_k W}{W}
\end{align}
$$

There are two nontrivial quantities we need to calculate here, $v^i$ and $w$

### $v^i$

Firstly, we calculate $u_k = \frac{\tilde{S}_k}{p_* h}$

The quantity $v^i$ is as follows:

$$v^i = -\beta^i + \frac{W^2 \alpha \tilde{\gamma}^{ij} \tilde{S}_j}{w h}$$

This can either be worked out from [2.12](https://arxiv.org/pdf/gr-qc/9908027) and converting their variables, or by calculating $\frac{u^i}{u^0}$ as $$g^{i\nu} u_{\nu}$$. You'll also have to work out the quantity $u_0$ if you're deriving this by hand. Todo: Do this at the endof the article

### $w$

This quantity is much less fun. It has the following form (29):

$$w^2 = p_*^2+ W^2 \tilde{\gamma}^{ij}\tilde{S}_i \tilde{S}_j \left[1 + \frac{\Gamma e_*^{\Gamma}}{p_*(w \frac{e^{6\phi}}{p_*})^{\Gamma-1}} \right]^{-2}$$

There are two problems:

1. There is no analytic solution
2. It divides by zero a fair bit

We can solve #1 by using fixed point iteration with the initial guess $w=1$ (or perhaps, $w=p_*$) as this is a lorentz factor multiplied by density terms. Simply plug in your guess into the right hand side, calculate the new value of $w$, and rinse and repeat. #2 is more of a pain

The way this equation is structured is mildly unimplementable. Lets rearrange it a bit:

$$\begin{align}
A &= (W^3)^{\Gamma-1}\\
D &= \frac{w^{\Gamma-1}}{w^{\Gamma-1} + A \Gamma e_*^{\Gamma} p_*^{\Gamma-2}}\\
w^2 &= p_*^2 + W^2 \tilde{\gamma}^{ij} \tilde{S}_i \tilde{S}_j D^2\\
\end{align}
$$

The singular part is the divisor of $D$, and to fix it you can simply clamp the bottom to a small constant. We'll be getting back to the singular division issue later, as we'll be handling it systematically

Its worth noting here that when $\Gamma = 2$, the factor of $p_*$ drops out

### Recovering the primitive variables

$\rho_0$ and $\epsilon$ are called the primitive hydrodynamic variables, and recovering them requires $w$. Once you have that, you can calculate:

$$\begin{align}
\rho_0 &= \frac{W^3 p_*^2}{w}\\
\epsilon &= e_*^\Gamma p_*^{\Gamma - 2} (\frac{W^3}{w})^{\Gamma - 1}
\end{align}
$$

Other usefully optimised quantities are:

$$\begin{align}
\rho_0 \epsilon &= \left (e_* W^3 \frac{p_*}{w} \right)^\Gamma\\
h &= 1 + \Gamma \epsilon
\end{align}
$$

## ADM Source terms

There are four standard adm source terms. These make up the components of the stress energy tensor, which are fed into our ADM equations to make matter work

$$\begin{align}
\rho_s &= h w W^3 - P\\
S_i &= W^3\tilde{S}_i\\
S_{ij} &= \frac{W^3}{wh}\tilde{S}_i \tilde{S}_j + P \gamma_{ij}\\
S &= \gamma^{ij} S_{ij} = W^2 \tilde{\gamma}^{ij} S_{ij} \\
\end{align}$$

There's a minor problem: $S_{ij}$ is singular at the singularity. The issue is that $\gamma_{ij}$ is undefined

Luckily, we can skip to the future, and discover that the form of our $S_{ij}$ source term is actually: $-W^2 8 \pi \alpha S_{ij}$[^alttechnique]. Given that $$W^2 \gamma_{ij} = \tilde{\gamma}_{ij}$$, we can instead re-format our equation like this:

[^alttechnique]: Calculating the pressure involves calculating the quantity $\rho_0 \epsilon$: we could scavenge one of the $W^2$ terms from that calculation to instead remove the $\gamma_{ij}$ term. However, the construction presented is a slightly more general approach that we can use in other methods, rather than relying on the *specific* form of the source terms, so we'll stick with it

$$
\begin{align}
\tilde{S}_{ij} &= \frac{W^5}{wh} \tilde{S}_i \tilde{S}_j + P \tilde{\gamma}_{ij}\\
S &=\tilde{\gamma}^{ij} \tilde{S}_{ij} \\
\end{align}
$$

We'll have to modify our BSSN source term to match the absorbed $W^2$ term, but now our source terms become regular at the metric tensor. This is a minor improvement over the standard arrangement

## The BSSN equations

The modifications are straightforward:

$$\begin{align}
\partial_t K &\mathrel{+}= 4 \pi \alpha (S + \rho_s)\\
\partial_t \tilde{A}_{ij} &\mathrel{+}= -8 \pi \alpha \tilde{S}_{ij}^{TF}\\
\partial_t \tilde{\Gamma}^i &\mathrel{+}= -16 \pi \alpha \tilde{\gamma}^{ij} S_j\\
\mathcal{H} &\mathrel{+}= -16 \pi \rho_s\\
\mathcal{M}_i &\mathrel{+}= -8 \pi S_i\\
\end{align}$$

The source terms conspire very conveniently to avoid having to calculate infinite quantities at the singularity which is great. The only infinities we have to worry about are in the actual hydrodynamic evolution equations themselves

## Implementation Details

### Divisions by zero

As you may have noticed, our equations involve quite a bit of dividing by zero. In general, there are many instances of divisions by $w$, or $W$, which we'll have to deal with

In general, dealing with this is pretty straightforward. For division by $W$, I clamp $W$ to $0.1$. This might seem quite large, but in general we don't really care about the hydrodynamics near the singularity of a black hole, and its more important for the equations to remain regular

For divisions by equations involving $\rho_*$ or $w$, I use a division tolerance of $1e-6$

### Stability

#### Non atmospheric hydrodynamics

One of the key aspects of this paper is the non-atmospheric aspect of it. The idea here is that when $\rho_* < \rho_{min}$ (here, $1e-8$), you flush all your evolution variables to $0$ for a true vacuum. This is a tad unusual as hydrodynamics goes, but it does leave a few questions about exactly how and when to flush your evolution variables to zero

We're using a pretty different integration scheme (backwards euler) compared to the paper. You may be tempted to flush variables to zero at the end of a backwards euler substep, but this is actually the wrong choice. Consider that the next backwards euler iteration is calculated as:

$$next = base + f(in)$$

If our cell value is just below $\rho_{min}$, and our neighbours are above, in the next iteration there'll be effectively a hole in the simulation grid which fluid will rush into. Because $base$ is nonzero, this means that we'll end up with too much fluid in our current cell. This can cause an oscillatory behaviour which doesn't converge very well

Instead, I copy the current cell value over if $\rho_* < \rho_{min}$, and only perform a flush after the whole backwards euler substep is resolved

#### Operator Splitting

Our equations are of the form:

$$\partial_t X + \partial_i (X v^i) = \mathrm{rhs}$$

Operator splitting means that you update all the advection terms first, and then evaluate the rhs post advection. You might notice that this is effectively a backwards euler step given that our right hand size is $0$ for most of our evolution variables. In general, this is something you don't need to worry about with a stable integrator

I did some fairly extensive testing of various operator splitting methods vs treating these as regular evolution equations for this article, and was not able to find any stability difference at all. Operator splitting requires a few extra buffers for storage of intermediate variables, so in this case it was strictly worse

#### Artificial Viscosity

There are two reasons to introduce artificial viscosity

1. To deal with shocks, ie discontinuities
2. To damp the oscillations that occur as a result of our approximate initial conditions

To do this, you modify the $\partial_k P$ pressure term in the evolution of $$\tilde{S}_k$$ extra viscous term. There are two complementary ways to modify this

1. Quadratic viscosity
2. Linear viscosity

##### Quadratic Viscosity

$$\begin{cases}
P_{Qvis} = C_{Qvis}A(\delta v)^2\;\;\mathrm{for} \;\delta v < 0\\
0 \; \mathrm{otherwise}
\end{cases}$$

Where:

$$\begin{align}
A &= e_*^\Gamma (W^3)^{\Gamma-1} \frac{p_*^{\Gamma-1}}{w^{\Gamma-1}}\\
\delta v &= 2 \partial_k v^k \Delta h
\end{align}$$

Where $$\Delta h$$ is the scale. $C_{Qvis}$ is a damping constant, which I set to $1$, and this paper recommends the range $[0.1, 1]$

Quadratic viscosity is generally left on throughout a simulation

##### Linear viscosity

$$\begin{cases}
P_{Qvis} = -C_{Lvis}\sqrt{(\Gamma/n) p_* A}\;\;\mathrm{for} \;\delta v < 0\\
0 \; \mathrm{otherwise}
\end{cases}$$

$C_{Lvis}$ is a damping constant in the range $[0, 1]$. In my case, I set this damping constant as follows:

$$C_{Lvis} = e^{-\frac{t^2}{2 S^2}}$$

$S$ is a constant that represents a damping timescale for the linear viscosity, as it is generally only useful in the early parts of the simulation to iron out the star's oscillations

##### Viscosity $e_*$

When using viscosity, you have to modify the evolution equation of $e_*$. The term to add is:

$$\partial_t e_* += -(\rho_0 \epsilon)^{(-1 + \frac{1}{\Gamma})} \;\; \frac{P_{extra}}{\Gamma} \; \partial_k (\frac{w W^{-3} v^k}{p_*})$$

#### Black Hole Collapse

Matter within a black hole in the set of equations I'm presenting here is only moderately badly behaved at the singularity, which is frankly incredible. You do need to do two things to make this work well

1. Disable all viscosity in the vicinity of an event horizon
2. Dissipate all the matter fields to zero when within an event horizon

In general, the lapse $\alpha$ is a good surrogate variable for being near an event horizon. I use a conservative $0.45$ for disabling viscosity, and $0.15$ for dissipating matter fields. The latter constraint imposes a minimum simulation resolution to successfully simulate a black hole

#### Boundaries

The sommerfeld boundary conditions I find tend to be a bit unstable with matter. Simply damping the fields away to zero as they approach the boundary works very well

#### Velocity clamping

One persistent problem I have run into in this simulation is $$\tilde{S}_k$$ blowing up to infinitely high values. There doesn't appear to be any particular constraints on this variable, which can lead to the fluid acquiring rather crazy velocities

To fix this, after a backwards euler subset, I enforce a constraint to limit the maximum velocity that the fluid can take:

```c++
    valuef bound = 0.9f;

    valuef p_star = hydro.p_star[pos, dim];
    valuef e_star = hydro.e_star[pos, dim];

    v3f Si = {hydro.Si[0][pos, dim], hydro.Si[1][pos, dim], hydro.Si[2][pos, dim]};
    pin(Si);

    valuef w = calculate_w(p_star, e_star, args.W, args.cY.invert(), Si);
    valuef epsilon = calculate_epsilon(p_star, e_star, args.W, w);
    valuef h = calculate_h_from_epsilon(epsilon);

    valuef cst = p_star * bound * h;

    v3f clamped = clamp(Si, -cst, cst);

    as_ref(hydro.Si[0][pos, dim]) = clamped[0];
    as_ref(hydro.Si[1][pos, dim]) = clamped[1];
    as_ref(hydro.Si[2][pos, dim]) = clamped[2];
```

Luckily we can avoid calculating the actual fluid velocity $u_k$. This step is also necessary to stabilise fluid inflowing into an event horizon

The bound of $0.9$ is arbitrary. There is likely a theoretical reason to derive a value $< 1$, as that is the maximum stable value under testing

#### Kreiss-Oliger

All hydrodynamic fields have Kreiss-Oliger damping applied to them at the same strength as the BSSN variables

#### Leibnitz

As mentioned previously, there are ambiguities as to when to flush the evolution variables to $0$. One thing to keep in mind is that you may be tempted to apply a standard Leibnitz rule to the following expression:

$$\partial_k (X v^k) = (\partial_k X) v^k + (\partial_k v^k) X $$

In the implementation strategy I chose, I flush $v$ to zero when calculated, which makes these two quantities quite inequivalent when discretised. Its not wrong to do so, but you may find stability differences if you're expanding out the partial derivatives rather than calculating them directly

#### e_* blows up

One known consequence of the atmosphere-free formulation is that a thin (resolution dependent) shell of material drifts away from the star, and remains suspended around it. This isn't ideal, but currently I'm unaware of anything that can be done to prevent this. This thin shell can end up superheating, causing unfun code times. This is a similar problem to fluid accelerating massively

This paper fixes it by clamping $$e_* = min(e_*, 10 \rho_*)$$. I do this when $\rho_* < 10\rho_{min}$, though I haven't found this modification is terribly important in practice

#### Unphysical oscillations, and gauge collapse

The paper mentions some oscillations appear increasingly as time goes on, though they also mark them as non-relevant. While I'm not sure exactly whether or not the following test case is what they describe, I did notice something odd when looking at an isolated neutron star:

<iframe width="560" height="315" src="https://www.youtube.com/embed/To-_85LlW8g?si=tnZYw1nmhKpH1jvx" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

This took me a very hot minute to track down. It appears that there's an unfortunate coupling between the $\partial_k \alpha$ term in the evolution equations, and the BSSN evolution equations themselves

You see, at the begining of the simulation, the stars want to collapse to a stable state. On top of this, the initial gauge conditions are *also* a guess, and *also* want to collapse to a stable state. The combination of these two mutually dependent collapses happening simultaneously appears to cause an ever increasing series of oscillations

Luckily, we already completely accidentally have the cure. The gauge damping method implemented in the second article can be used to partially delay the initial collapse of the gauge, which can allow the star to fully settle to a stable state. While it wasn't designed for this whatsoever, it does appear to accidentally work well

<iframe width="560" height="315" src="https://www.youtube.com/embed/81lubH4l3-M?si=mdrF9Um59VbhmkIT" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

The star does eventually settle to a completely stable form

#### Hamiltonian damping

:)

#### Gauge damping

:(

## Testing

Do: Spin test

## Its hard to see the spinning

Advecting arbitrary scalar fields

## Merger

# Initial conditions, abridged

## Step 1

Solve these two equations for the following quantities: mass ($M$), radius ($R$), and energy density ($\mu$). Stop integrating when $P <= 0$. This determines $R$. The integration should start at $r=r_{min}$

$$\begin{align}
\frac{dm}{dr} &= 4 \pi r^2 \mu\\
\frac{dP}{dr} &= -(\mu + P)\frac{m + 4 \pi r^3 P}{r(r-2m)}
\end{align}$$

With the equation of state:

$$P = K \rho_0^\Gamma$$

Boundary conditions are:

1. $M(0) = \frac{4}{3} \pi r_{min}^3 \mu_c$,
2. $P(0) = K \rho_{c}^\Gamma$, where $\rho_{c}$ is the central rest mass density

$\mu_c$ is the energy density at the centre of the star, calculated from the rest central density

## Step 2


## papers

Analytic: https://www.aanda.org/articles/aa/pdf/2010/06/aa12738-09.pdf

Numerical: https://arxiv.org/pdf/1606.04881

Useful ref: https://arxiv.org/pdf/gr-qc/0403029

Today

## Approximating TOV

For $\Gamma=2$, there are approximations that can be used from eg [here (page 3)](https://www.aanda.org/articles/aa/pdf/2010/06/aa12738-09.pdf). I actually used this one for a while, and would highly recommend it if you don't want to solve TOV yourself

## I think there's an error in one of the equations

I'm 80% sure that (82) is incorrect, and that the leading factor of $2 \pi$ should be $4 \pi$. It gives exactly half the expected ADM mass for me